//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace Inedo.BuildMasterExtensions.Axosoft.AxoDefect {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DefectHandlerSoap", Namespace="http://axosoft.com/ontime/webservices/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OnTimeItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomFieldValue[]))]
    public partial class DefectHandler : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDefectWithNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDefectWithLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDefectWithLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDefectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDefectsWithNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByReleaseAndProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByCustomerAndProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByCustomerContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByCustomerContactAndProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefectsByUserAndProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetByDefectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomFieldValuesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomFieldsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddChangeNotificationUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddChangeNotificationCustomerContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddChangeNotificationEmailAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback CastVoteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DefectHandler() {
            this.Url = "http://localhost:8080/DefectService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddDefectCompletedEventHandler AddDefectCompleted;
        
        /// <remarks/>
        public event AddDefectWithNotificationCompletedEventHandler AddDefectWithNotificationCompleted;
        
        /// <remarks/>
        public event UpdateDefectCompletedEventHandler UpdateDefectCompleted;
        
        /// <remarks/>
        public event UpdateDefectWithLockCompletedEventHandler UpdateDefectWithLockCompleted;
        
        /// <remarks/>
        public event DeleteDefectCompletedEventHandler DeleteDefectCompleted;
        
        /// <remarks/>
        public event DeleteDefectWithLockCompletedEventHandler DeleteDefectWithLockCompleted;
        
        /// <remarks/>
        public event GetAllDefectsCompletedEventHandler GetAllDefectsCompleted;
        
        /// <remarks/>
        public event GetAllDefectsWithNamesCompletedEventHandler GetAllDefectsWithNamesCompleted;
        
        /// <remarks/>
        public event GetDefectsByProjectCompletedEventHandler GetDefectsByProjectCompleted;
        
        /// <remarks/>
        public event GetDefectsByReleaseCompletedEventHandler GetDefectsByReleaseCompleted;
        
        /// <remarks/>
        public event GetDefectsByReleaseAndProjectCompletedEventHandler GetDefectsByReleaseAndProjectCompleted;
        
        /// <remarks/>
        public event GetDefectsByCustomerCompletedEventHandler GetDefectsByCustomerCompleted;
        
        /// <remarks/>
        public event GetDefectsByCustomerAndProjectCompletedEventHandler GetDefectsByCustomerAndProjectCompleted;
        
        /// <remarks/>
        public event GetDefectsByCustomerContactCompletedEventHandler GetDefectsByCustomerContactCompleted;
        
        /// <remarks/>
        public event GetDefectsByCustomerContactAndProjectCompletedEventHandler GetDefectsByCustomerContactAndProjectCompleted;
        
        /// <remarks/>
        public event GetDefectsByUserCompletedEventHandler GetDefectsByUserCompleted;
        
        /// <remarks/>
        public event GetDefectsByUserAndProjectCompletedEventHandler GetDefectsByUserAndProjectCompleted;
        
        /// <remarks/>
        public event GetByDefectIdCompletedEventHandler GetByDefectIdCompleted;
        
        /// <remarks/>
        public event GetCustomFieldValuesListCompletedEventHandler GetCustomFieldValuesListCompleted;
        
        /// <remarks/>
        public event GetCustomFieldsListCompletedEventHandler GetCustomFieldsListCompleted;
        
        /// <remarks/>
        public event AddChangeNotificationUserCompletedEventHandler AddChangeNotificationUserCompleted;
        
        /// <remarks/>
        public event AddChangeNotificationCustomerContactCompletedEventHandler AddChangeNotificationCustomerContactCompleted;
        
        /// <remarks/>
        public event AddChangeNotificationEmailAddressCompletedEventHandler AddChangeNotificationEmailAddressCompleted;
        
        /// <remarks/>
        public event CastVoteCompletedEventHandler CastVoteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/AddDefect", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDefect(System.Guid securityToken, Defect defect) {
            object[] results = this.Invoke("AddDefect", new object[] {
                        securityToken,
                        defect});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDefectAsync(System.Guid securityToken, Defect defect) {
            this.AddDefectAsync(securityToken, defect, null);
        }
        
        /// <remarks/>
        public void AddDefectAsync(System.Guid securityToken, Defect defect, object userState) {
            if ((this.AddDefectOperationCompleted == null)) {
                this.AddDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDefectOperationCompleted);
            }
            this.InvokeAsync("AddDefect", new object[] {
                        securityToken,
                        defect}, this.AddDefectOperationCompleted, userState);
        }
        
        private void OnAddDefectOperationCompleted(object arg) {
            if ((this.AddDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDefectCompleted(this, new AddDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/AddDefectWithNotification", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDefectWithNotification(System.Guid securityToken, Defect defect, bool processNotification) {
            object[] results = this.Invoke("AddDefectWithNotification", new object[] {
                        securityToken,
                        defect,
                        processNotification});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDefectWithNotificationAsync(System.Guid securityToken, Defect defect, bool processNotification) {
            this.AddDefectWithNotificationAsync(securityToken, defect, processNotification, null);
        }
        
        /// <remarks/>
        public void AddDefectWithNotificationAsync(System.Guid securityToken, Defect defect, bool processNotification, object userState) {
            if ((this.AddDefectWithNotificationOperationCompleted == null)) {
                this.AddDefectWithNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDefectWithNotificationOperationCompleted);
            }
            this.InvokeAsync("AddDefectWithNotification", new object[] {
                        securityToken,
                        defect,
                        processNotification}, this.AddDefectWithNotificationOperationCompleted, userState);
        }
        
        private void OnAddDefectWithNotificationOperationCompleted(object arg) {
            if ((this.AddDefectWithNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDefectWithNotificationCompleted(this, new AddDefectWithNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/UpdateDefect", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDefect(System.Guid securityToken, Defect defect) {
            this.Invoke("UpdateDefect", new object[] {
                        securityToken,
                        defect});
        }
        
        /// <remarks/>
        public void UpdateDefectAsync(System.Guid securityToken, Defect defect) {
            this.UpdateDefectAsync(securityToken, defect, null);
        }
        
        /// <remarks/>
        public void UpdateDefectAsync(System.Guid securityToken, Defect defect, object userState) {
            if ((this.UpdateDefectOperationCompleted == null)) {
                this.UpdateDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDefectOperationCompleted);
            }
            this.InvokeAsync("UpdateDefect", new object[] {
                        securityToken,
                        defect}, this.UpdateDefectOperationCompleted, userState);
        }
        
        private void OnUpdateDefectOperationCompleted(object arg) {
            if ((this.UpdateDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDefectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/UpdateDefectWithLock", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("newLockId")]
        public int UpdateDefectWithLock(System.Guid securityToken, Defect defect, int lockId) {
            object[] results = this.Invoke("UpdateDefectWithLock", new object[] {
                        securityToken,
                        defect,
                        lockId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDefectWithLockAsync(System.Guid securityToken, Defect defect, int lockId) {
            this.UpdateDefectWithLockAsync(securityToken, defect, lockId, null);
        }
        
        /// <remarks/>
        public void UpdateDefectWithLockAsync(System.Guid securityToken, Defect defect, int lockId, object userState) {
            if ((this.UpdateDefectWithLockOperationCompleted == null)) {
                this.UpdateDefectWithLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDefectWithLockOperationCompleted);
            }
            this.InvokeAsync("UpdateDefectWithLock", new object[] {
                        securityToken,
                        defect,
                        lockId}, this.UpdateDefectWithLockOperationCompleted, userState);
        }
        
        private void OnUpdateDefectWithLockOperationCompleted(object arg) {
            if ((this.UpdateDefectWithLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDefectWithLockCompleted(this, new UpdateDefectWithLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/DeleteDefect", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDefect(System.Guid securityToken, int defectId) {
            this.Invoke("DeleteDefect", new object[] {
                        securityToken,
                        defectId});
        }
        
        /// <remarks/>
        public void DeleteDefectAsync(System.Guid securityToken, int defectId) {
            this.DeleteDefectAsync(securityToken, defectId, null);
        }
        
        /// <remarks/>
        public void DeleteDefectAsync(System.Guid securityToken, int defectId, object userState) {
            if ((this.DeleteDefectOperationCompleted == null)) {
                this.DeleteDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDefectOperationCompleted);
            }
            this.InvokeAsync("DeleteDefect", new object[] {
                        securityToken,
                        defectId}, this.DeleteDefectOperationCompleted, userState);
        }
        
        private void OnDeleteDefectOperationCompleted(object arg) {
            if ((this.DeleteDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDefectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/DeleteDefectWithLock", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("newLockId")]
        public int DeleteDefectWithLock(System.Guid securityToken, int defectId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] defectLastUpdated, int lockId) {
            object[] results = this.Invoke("DeleteDefectWithLock", new object[] {
                        securityToken,
                        defectId,
                        defectLastUpdated,
                        lockId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDefectWithLockAsync(System.Guid securityToken, int defectId, byte[] defectLastUpdated, int lockId) {
            this.DeleteDefectWithLockAsync(securityToken, defectId, defectLastUpdated, lockId, null);
        }
        
        /// <remarks/>
        public void DeleteDefectWithLockAsync(System.Guid securityToken, int defectId, byte[] defectLastUpdated, int lockId, object userState) {
            if ((this.DeleteDefectWithLockOperationCompleted == null)) {
                this.DeleteDefectWithLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDefectWithLockOperationCompleted);
            }
            this.InvokeAsync("DeleteDefectWithLock", new object[] {
                        securityToken,
                        defectId,
                        defectLastUpdated,
                        lockId}, this.DeleteDefectWithLockOperationCompleted, userState);
        }
        
        private void OnDeleteDefectWithLockOperationCompleted(object arg) {
            if ((this.DeleteDefectWithLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDefectWithLockCompleted(this, new DeleteDefectWithLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetAllDefects", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllDefects(System.Guid securityToken) {
            object[] results = this.Invoke("GetAllDefects", new object[] {
                        securityToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDefectsAsync(System.Guid securityToken) {
            this.GetAllDefectsAsync(securityToken, null);
        }
        
        /// <remarks/>
        public void GetAllDefectsAsync(System.Guid securityToken, object userState) {
            if ((this.GetAllDefectsOperationCompleted == null)) {
                this.GetAllDefectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDefectsOperationCompleted);
            }
            this.InvokeAsync("GetAllDefects", new object[] {
                        securityToken}, this.GetAllDefectsOperationCompleted, userState);
        }
        
        private void OnGetAllDefectsOperationCompleted(object arg) {
            if ((this.GetAllDefectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDefectsCompleted(this, new GetAllDefectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetAllDefectsWithNames", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllDefectsWithNames(System.Guid securityToken) {
            object[] results = this.Invoke("GetAllDefectsWithNames", new object[] {
                        securityToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDefectsWithNamesAsync(System.Guid securityToken) {
            this.GetAllDefectsWithNamesAsync(securityToken, null);
        }
        
        /// <remarks/>
        public void GetAllDefectsWithNamesAsync(System.Guid securityToken, object userState) {
            if ((this.GetAllDefectsWithNamesOperationCompleted == null)) {
                this.GetAllDefectsWithNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDefectsWithNamesOperationCompleted);
            }
            this.InvokeAsync("GetAllDefectsWithNames", new object[] {
                        securityToken}, this.GetAllDefectsWithNamesOperationCompleted, userState);
        }
        
        private void OnGetAllDefectsWithNamesOperationCompleted(object arg) {
            if ((this.GetAllDefectsWithNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDefectsWithNamesCompleted(this, new GetAllDefectsWithNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByProject", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByProject(System.Guid securityToken, int projectId) {
            object[] results = this.Invoke("GetDefectsByProject", new object[] {
                        securityToken,
                        projectId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByProjectAsync(System.Guid securityToken, int projectId) {
            this.GetDefectsByProjectAsync(securityToken, projectId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByProjectAsync(System.Guid securityToken, int projectId, object userState) {
            if ((this.GetDefectsByProjectOperationCompleted == null)) {
                this.GetDefectsByProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByProjectOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByProject", new object[] {
                        securityToken,
                        projectId}, this.GetDefectsByProjectOperationCompleted, userState);
        }
        
        private void OnGetDefectsByProjectOperationCompleted(object arg) {
            if ((this.GetDefectsByProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByProjectCompleted(this, new GetDefectsByProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByRelease", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByRelease(System.Guid securityToken, int releaseId) {
            object[] results = this.Invoke("GetDefectsByRelease", new object[] {
                        securityToken,
                        releaseId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByReleaseAsync(System.Guid securityToken, int releaseId) {
            this.GetDefectsByReleaseAsync(securityToken, releaseId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByReleaseAsync(System.Guid securityToken, int releaseId, object userState) {
            if ((this.GetDefectsByReleaseOperationCompleted == null)) {
                this.GetDefectsByReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByReleaseOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByRelease", new object[] {
                        securityToken,
                        releaseId}, this.GetDefectsByReleaseOperationCompleted, userState);
        }
        
        private void OnGetDefectsByReleaseOperationCompleted(object arg) {
            if ((this.GetDefectsByReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByReleaseCompleted(this, new GetDefectsByReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByReleaseAndProject", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByReleaseAndProject(System.Guid securityToken, int releaseId, int projectId) {
            object[] results = this.Invoke("GetDefectsByReleaseAndProject", new object[] {
                        securityToken,
                        releaseId,
                        projectId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByReleaseAndProjectAsync(System.Guid securityToken, int releaseId, int projectId) {
            this.GetDefectsByReleaseAndProjectAsync(securityToken, releaseId, projectId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByReleaseAndProjectAsync(System.Guid securityToken, int releaseId, int projectId, object userState) {
            if ((this.GetDefectsByReleaseAndProjectOperationCompleted == null)) {
                this.GetDefectsByReleaseAndProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByReleaseAndProjectOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByReleaseAndProject", new object[] {
                        securityToken,
                        releaseId,
                        projectId}, this.GetDefectsByReleaseAndProjectOperationCompleted, userState);
        }
        
        private void OnGetDefectsByReleaseAndProjectOperationCompleted(object arg) {
            if ((this.GetDefectsByReleaseAndProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByReleaseAndProjectCompleted(this, new GetDefectsByReleaseAndProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByCustomer", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByCustomer(System.Guid securityToken, int customerId) {
            object[] results = this.Invoke("GetDefectsByCustomer", new object[] {
                        securityToken,
                        customerId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerAsync(System.Guid securityToken, int customerId) {
            this.GetDefectsByCustomerAsync(securityToken, customerId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerAsync(System.Guid securityToken, int customerId, object userState) {
            if ((this.GetDefectsByCustomerOperationCompleted == null)) {
                this.GetDefectsByCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByCustomerOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByCustomer", new object[] {
                        securityToken,
                        customerId}, this.GetDefectsByCustomerOperationCompleted, userState);
        }
        
        private void OnGetDefectsByCustomerOperationCompleted(object arg) {
            if ((this.GetDefectsByCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByCustomerCompleted(this, new GetDefectsByCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByCustomerAndProject", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByCustomerAndProject(System.Guid securityToken, int customerId, int projectId) {
            object[] results = this.Invoke("GetDefectsByCustomerAndProject", new object[] {
                        securityToken,
                        customerId,
                        projectId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerAndProjectAsync(System.Guid securityToken, int customerId, int projectId) {
            this.GetDefectsByCustomerAndProjectAsync(securityToken, customerId, projectId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerAndProjectAsync(System.Guid securityToken, int customerId, int projectId, object userState) {
            if ((this.GetDefectsByCustomerAndProjectOperationCompleted == null)) {
                this.GetDefectsByCustomerAndProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByCustomerAndProjectOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByCustomerAndProject", new object[] {
                        securityToken,
                        customerId,
                        projectId}, this.GetDefectsByCustomerAndProjectOperationCompleted, userState);
        }
        
        private void OnGetDefectsByCustomerAndProjectOperationCompleted(object arg) {
            if ((this.GetDefectsByCustomerAndProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByCustomerAndProjectCompleted(this, new GetDefectsByCustomerAndProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByCustomerContact", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByCustomerContact(System.Guid securityToken, int customerContactId) {
            object[] results = this.Invoke("GetDefectsByCustomerContact", new object[] {
                        securityToken,
                        customerContactId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerContactAsync(System.Guid securityToken, int customerContactId) {
            this.GetDefectsByCustomerContactAsync(securityToken, customerContactId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerContactAsync(System.Guid securityToken, int customerContactId, object userState) {
            if ((this.GetDefectsByCustomerContactOperationCompleted == null)) {
                this.GetDefectsByCustomerContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByCustomerContactOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByCustomerContact", new object[] {
                        securityToken,
                        customerContactId}, this.GetDefectsByCustomerContactOperationCompleted, userState);
        }
        
        private void OnGetDefectsByCustomerContactOperationCompleted(object arg) {
            if ((this.GetDefectsByCustomerContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByCustomerContactCompleted(this, new GetDefectsByCustomerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByCustomerContactAndProject", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByCustomerContactAndProject(System.Guid securityToken, int customerContactId, int projectId) {
            object[] results = this.Invoke("GetDefectsByCustomerContactAndProject", new object[] {
                        securityToken,
                        customerContactId,
                        projectId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerContactAndProjectAsync(System.Guid securityToken, int customerContactId, int projectId) {
            this.GetDefectsByCustomerContactAndProjectAsync(securityToken, customerContactId, projectId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByCustomerContactAndProjectAsync(System.Guid securityToken, int customerContactId, int projectId, object userState) {
            if ((this.GetDefectsByCustomerContactAndProjectOperationCompleted == null)) {
                this.GetDefectsByCustomerContactAndProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByCustomerContactAndProjectOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByCustomerContactAndProject", new object[] {
                        securityToken,
                        customerContactId,
                        projectId}, this.GetDefectsByCustomerContactAndProjectOperationCompleted, userState);
        }
        
        private void OnGetDefectsByCustomerContactAndProjectOperationCompleted(object arg) {
            if ((this.GetDefectsByCustomerContactAndProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByCustomerContactAndProjectCompleted(this, new GetDefectsByCustomerContactAndProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByUser", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByUser(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags) {
            object[] results = this.Invoke("GetDefectsByUser", new object[] {
                        securityToken,
                        userId,
                        userFilterFlags});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByUserAsync(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags) {
            this.GetDefectsByUserAsync(securityToken, userId, userFilterFlags, null);
        }
        
        /// <remarks/>
        public void GetDefectsByUserAsync(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags, object userState) {
            if ((this.GetDefectsByUserOperationCompleted == null)) {
                this.GetDefectsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByUserOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByUser", new object[] {
                        securityToken,
                        userId,
                        userFilterFlags}, this.GetDefectsByUserOperationCompleted, userState);
        }
        
        private void OnGetDefectsByUserOperationCompleted(object arg) {
            if ((this.GetDefectsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByUserCompleted(this, new GetDefectsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetDefectsByUserAndProject", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefectsByUserAndProject(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags, int projectId) {
            object[] results = this.Invoke("GetDefectsByUserAndProject", new object[] {
                        securityToken,
                        userId,
                        userFilterFlags,
                        projectId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefectsByUserAndProjectAsync(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags, int projectId) {
            this.GetDefectsByUserAndProjectAsync(securityToken, userId, userFilterFlags, projectId, null);
        }
        
        /// <remarks/>
        public void GetDefectsByUserAndProjectAsync(System.Guid securityToken, int userId, UsersTreeFilterFlags userFilterFlags, int projectId, object userState) {
            if ((this.GetDefectsByUserAndProjectOperationCompleted == null)) {
                this.GetDefectsByUserAndProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefectsByUserAndProjectOperationCompleted);
            }
            this.InvokeAsync("GetDefectsByUserAndProject", new object[] {
                        securityToken,
                        userId,
                        userFilterFlags,
                        projectId}, this.GetDefectsByUserAndProjectOperationCompleted, userState);
        }
        
        private void OnGetDefectsByUserAndProjectOperationCompleted(object arg) {
            if ((this.GetDefectsByUserAndProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefectsByUserAndProjectCompleted(this, new GetDefectsByUserAndProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetByDefectId", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Defect GetByDefectId(System.Guid securityToken, int defectId) {
            object[] results = this.Invoke("GetByDefectId", new object[] {
                        securityToken,
                        defectId});
            return ((Defect)(results[0]));
        }
        
        /// <remarks/>
        public void GetByDefectIdAsync(System.Guid securityToken, int defectId) {
            this.GetByDefectIdAsync(securityToken, defectId, null);
        }
        
        /// <remarks/>
        public void GetByDefectIdAsync(System.Guid securityToken, int defectId, object userState) {
            if ((this.GetByDefectIdOperationCompleted == null)) {
                this.GetByDefectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByDefectIdOperationCompleted);
            }
            this.InvokeAsync("GetByDefectId", new object[] {
                        securityToken,
                        defectId}, this.GetByDefectIdOperationCompleted, userState);
        }
        
        private void OnGetByDefectIdOperationCompleted(object arg) {
            if ((this.GetByDefectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByDefectIdCompleted(this, new GetByDefectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetCustomFieldValuesList", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomFieldValue[] GetCustomFieldValuesList(System.Guid securityToken) {
            object[] results = this.Invoke("GetCustomFieldValuesList", new object[] {
                        securityToken});
            return ((CustomFieldValue[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomFieldValuesListAsync(System.Guid securityToken) {
            this.GetCustomFieldValuesListAsync(securityToken, null);
        }
        
        /// <remarks/>
        public void GetCustomFieldValuesListAsync(System.Guid securityToken, object userState) {
            if ((this.GetCustomFieldValuesListOperationCompleted == null)) {
                this.GetCustomFieldValuesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomFieldValuesListOperationCompleted);
            }
            this.InvokeAsync("GetCustomFieldValuesList", new object[] {
                        securityToken}, this.GetCustomFieldValuesListOperationCompleted, userState);
        }
        
        private void OnGetCustomFieldValuesListOperationCompleted(object arg) {
            if ((this.GetCustomFieldValuesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomFieldValuesListCompleted(this, new GetCustomFieldValuesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/GetCustomFieldsList", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCustomFieldsList(System.Guid securityToken) {
            object[] results = this.Invoke("GetCustomFieldsList", new object[] {
                        securityToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomFieldsListAsync(System.Guid securityToken) {
            this.GetCustomFieldsListAsync(securityToken, null);
        }
        
        /// <remarks/>
        public void GetCustomFieldsListAsync(System.Guid securityToken, object userState) {
            if ((this.GetCustomFieldsListOperationCompleted == null)) {
                this.GetCustomFieldsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomFieldsListOperationCompleted);
            }
            this.InvokeAsync("GetCustomFieldsList", new object[] {
                        securityToken}, this.GetCustomFieldsListOperationCompleted, userState);
        }
        
        private void OnGetCustomFieldsListOperationCompleted(object arg) {
            if ((this.GetCustomFieldsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomFieldsListCompleted(this, new GetCustomFieldsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/AddChangeNotificationUser", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddChangeNotificationUser(System.Guid securityToken, int defectId, int userId) {
            this.Invoke("AddChangeNotificationUser", new object[] {
                        securityToken,
                        defectId,
                        userId});
        }
        
        /// <remarks/>
        public void AddChangeNotificationUserAsync(System.Guid securityToken, int defectId, int userId) {
            this.AddChangeNotificationUserAsync(securityToken, defectId, userId, null);
        }
        
        /// <remarks/>
        public void AddChangeNotificationUserAsync(System.Guid securityToken, int defectId, int userId, object userState) {
            if ((this.AddChangeNotificationUserOperationCompleted == null)) {
                this.AddChangeNotificationUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddChangeNotificationUserOperationCompleted);
            }
            this.InvokeAsync("AddChangeNotificationUser", new object[] {
                        securityToken,
                        defectId,
                        userId}, this.AddChangeNotificationUserOperationCompleted, userState);
        }
        
        private void OnAddChangeNotificationUserOperationCompleted(object arg) {
            if ((this.AddChangeNotificationUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddChangeNotificationUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/AddChangeNotificationCustomerContact", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddChangeNotificationCustomerContact(System.Guid securityToken, int defectId, int customerContactId) {
            this.Invoke("AddChangeNotificationCustomerContact", new object[] {
                        securityToken,
                        defectId,
                        customerContactId});
        }
        
        /// <remarks/>
        public void AddChangeNotificationCustomerContactAsync(System.Guid securityToken, int defectId, int customerContactId) {
            this.AddChangeNotificationCustomerContactAsync(securityToken, defectId, customerContactId, null);
        }
        
        /// <remarks/>
        public void AddChangeNotificationCustomerContactAsync(System.Guid securityToken, int defectId, int customerContactId, object userState) {
            if ((this.AddChangeNotificationCustomerContactOperationCompleted == null)) {
                this.AddChangeNotificationCustomerContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddChangeNotificationCustomerContactOperationCompleted);
            }
            this.InvokeAsync("AddChangeNotificationCustomerContact", new object[] {
                        securityToken,
                        defectId,
                        customerContactId}, this.AddChangeNotificationCustomerContactOperationCompleted, userState);
        }
        
        private void OnAddChangeNotificationCustomerContactOperationCompleted(object arg) {
            if ((this.AddChangeNotificationCustomerContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddChangeNotificationCustomerContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/AddChangeNotificationEmailAddress", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddChangeNotificationEmailAddress(System.Guid securityToken, int defectId, string emailAddress) {
            this.Invoke("AddChangeNotificationEmailAddress", new object[] {
                        securityToken,
                        defectId,
                        emailAddress});
        }
        
        /// <remarks/>
        public void AddChangeNotificationEmailAddressAsync(System.Guid securityToken, int defectId, string emailAddress) {
            this.AddChangeNotificationEmailAddressAsync(securityToken, defectId, emailAddress, null);
        }
        
        /// <remarks/>
        public void AddChangeNotificationEmailAddressAsync(System.Guid securityToken, int defectId, string emailAddress, object userState) {
            if ((this.AddChangeNotificationEmailAddressOperationCompleted == null)) {
                this.AddChangeNotificationEmailAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddChangeNotificationEmailAddressOperationCompleted);
            }
            this.InvokeAsync("AddChangeNotificationEmailAddress", new object[] {
                        securityToken,
                        defectId,
                        emailAddress}, this.AddChangeNotificationEmailAddressOperationCompleted, userState);
        }
        
        private void OnAddChangeNotificationEmailAddressOperationCompleted(object arg) {
            if ((this.AddChangeNotificationEmailAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddChangeNotificationEmailAddressCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://axosoft.com/ontime/webservices/CastVote", RequestNamespace="http://axosoft.com/ontime/webservices/", ResponseNamespace="http://axosoft.com/ontime/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CastVote(System.Guid securityToken, int defectId, UserType userType, int userId, int voteNumber) {
            this.Invoke("CastVote", new object[] {
                        securityToken,
                        defectId,
                        userType,
                        userId,
                        voteNumber});
        }
        
        /// <remarks/>
        public void CastVoteAsync(System.Guid securityToken, int defectId, UserType userType, int userId, int voteNumber) {
            this.CastVoteAsync(securityToken, defectId, userType, userId, voteNumber, null);
        }
        
        /// <remarks/>
        public void CastVoteAsync(System.Guid securityToken, int defectId, UserType userType, int userId, int voteNumber, object userState) {
            if ((this.CastVoteOperationCompleted == null)) {
                this.CastVoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCastVoteOperationCompleted);
            }
            this.InvokeAsync("CastVote", new object[] {
                        securityToken,
                        defectId,
                        userType,
                        userId,
                        voteNumber}, this.CastVoteOperationCompleted, userState);
        }
        
        private void OnCastVoteOperationCompleted(object arg) {
            if ((this.CastVoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CastVoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public partial class Defect : OnTimeItem {
        
        private int defectIdField;
        
        private string buildNumberField;
        
        private System.DateTime dateFoundField;
        
        private System.DateTime dateFixedField;
        
        private string buildNumberOfFixField;
        
        private int severityTypeIdField;
        
        private string replicationProceduresField;
        
        private string resolutionField;
        
        private int creatorIdField;
        
        /// <remarks/>
        public int DefectId {
            get {
                return this.defectIdField;
            }
            set {
                this.defectIdField = value;
            }
        }
        
        /// <remarks/>
        public string BuildNumber {
            get {
                return this.buildNumberField;
            }
            set {
                this.buildNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFound {
            get {
                return this.dateFoundField;
            }
            set {
                this.dateFoundField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFixed {
            get {
                return this.dateFixedField;
            }
            set {
                this.dateFixedField = value;
            }
        }
        
        /// <remarks/>
        public string BuildNumberOfFix {
            get {
                return this.buildNumberOfFixField;
            }
            set {
                this.buildNumberOfFixField = value;
            }
        }
        
        /// <remarks/>
        public int SeverityTypeId {
            get {
                return this.severityTypeIdField;
            }
            set {
                this.severityTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string ReplicationProcedures {
            get {
                return this.replicationProceduresField;
            }
            set {
                this.replicationProceduresField = value;
            }
        }
        
        /// <remarks/>
        public string Resolution {
            get {
                return this.resolutionField;
            }
            set {
                this.resolutionField = value;
            }
        }
        
        /// <remarks/>
        public int CreatorId {
            get {
                return this.creatorIdField;
            }
            set {
                this.creatorIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Defect))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public abstract partial class OnTimeItem {
        
        private bool hasAttachmentsField;
        
        private bool hasNotificationsField;
        
        private bool hasRelatedItemsField;
        
        private bool hasSCMFilesField;
        
        private bool hasEmailsField;
        
        private bool hasWorkLogField;
        
        private bool hasAlertsField;
        
        private string nameField;
        
        private CustomFieldValue[] customFieldValuesField;
        
        private int projectIdField;
        
        private int lastUpdatedByIdField;
        
        private bool archivedField;
        
        private int workflowStepIdField;
        
        private int reportedByIdField;
        
        private int assignedToIdField;
        
        private int createdByIdField;
        
        private int reportedByCustomerContactIdField;
        
        private float estimatedDurationField;
        
        private int durationUnitTypeIdField;
        
        private float remainingDurationField;
        
        private int remainingUnitTypeIdField;
        
        private float actualDurationField;
        
        private int actualUnitTypeIdField;
        
        private bool publiclyViewableField;
        
        private System.DateTime dueDateField;
        
        private int priorityTypeIdField;
        
        private int releaseIdField;
        
        private int statusTypeIdField;
        
        private byte percentCompleteField;
        
        private System.DateTime createdDateTimeField;
        
        private System.DateTime lastUpdatedDateTimeField;
        
        private string descriptionField;
        
        private string notesField;
        
        private byte[] lastUpdatedField;
        
        private int voteCountField;
        
        private decimal voteAverageField;
        
        private int userVoteField;
        
        private VoteItemType voteItemTypeField;
        
        private int itemIdField;
        
        /// <remarks/>
        public bool HasAttachments {
            get {
                return this.hasAttachmentsField;
            }
            set {
                this.hasAttachmentsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasNotifications {
            get {
                return this.hasNotificationsField;
            }
            set {
                this.hasNotificationsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasRelatedItems {
            get {
                return this.hasRelatedItemsField;
            }
            set {
                this.hasRelatedItemsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasSCMFiles {
            get {
                return this.hasSCMFilesField;
            }
            set {
                this.hasSCMFilesField = value;
            }
        }
        
        /// <remarks/>
        public bool HasEmails {
            get {
                return this.hasEmailsField;
            }
            set {
                this.hasEmailsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasWorkLog {
            get {
                return this.hasWorkLogField;
            }
            set {
                this.hasWorkLogField = value;
            }
        }
        
        /// <remarks/>
        public bool HasAlerts {
            get {
                return this.hasAlertsField;
            }
            set {
                this.hasAlertsField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public CustomFieldValue[] CustomFieldValues {
            get {
                return this.customFieldValuesField;
            }
            set {
                this.customFieldValuesField = value;
            }
        }
        
        /// <remarks/>
        public int ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public int LastUpdatedById {
            get {
                return this.lastUpdatedByIdField;
            }
            set {
                this.lastUpdatedByIdField = value;
            }
        }
        
        /// <remarks/>
        public bool Archived {
            get {
                return this.archivedField;
            }
            set {
                this.archivedField = value;
            }
        }
        
        /// <remarks/>
        public int WorkflowStepId {
            get {
                return this.workflowStepIdField;
            }
            set {
                this.workflowStepIdField = value;
            }
        }
        
        /// <remarks/>
        public int ReportedById {
            get {
                return this.reportedByIdField;
            }
            set {
                this.reportedByIdField = value;
            }
        }
        
        /// <remarks/>
        public int AssignedToId {
            get {
                return this.assignedToIdField;
            }
            set {
                this.assignedToIdField = value;
            }
        }
        
        /// <remarks/>
        public int CreatedById {
            get {
                return this.createdByIdField;
            }
            set {
                this.createdByIdField = value;
            }
        }
        
        /// <remarks/>
        public int ReportedByCustomerContactId {
            get {
                return this.reportedByCustomerContactIdField;
            }
            set {
                this.reportedByCustomerContactIdField = value;
            }
        }
        
        /// <remarks/>
        public float EstimatedDuration {
            get {
                return this.estimatedDurationField;
            }
            set {
                this.estimatedDurationField = value;
            }
        }
        
        /// <remarks/>
        public int DurationUnitTypeId {
            get {
                return this.durationUnitTypeIdField;
            }
            set {
                this.durationUnitTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public float RemainingDuration {
            get {
                return this.remainingDurationField;
            }
            set {
                this.remainingDurationField = value;
            }
        }
        
        /// <remarks/>
        public int RemainingUnitTypeId {
            get {
                return this.remainingUnitTypeIdField;
            }
            set {
                this.remainingUnitTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public float ActualDuration {
            get {
                return this.actualDurationField;
            }
            set {
                this.actualDurationField = value;
            }
        }
        
        /// <remarks/>
        public int ActualUnitTypeId {
            get {
                return this.actualUnitTypeIdField;
            }
            set {
                this.actualUnitTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public bool PubliclyViewable {
            get {
                return this.publiclyViewableField;
            }
            set {
                this.publiclyViewableField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DueDate {
            get {
                return this.dueDateField;
            }
            set {
                this.dueDateField = value;
            }
        }
        
        /// <remarks/>
        public int PriorityTypeId {
            get {
                return this.priorityTypeIdField;
            }
            set {
                this.priorityTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int ReleaseId {
            get {
                return this.releaseIdField;
            }
            set {
                this.releaseIdField = value;
            }
        }
        
        /// <remarks/>
        public int StatusTypeId {
            get {
                return this.statusTypeIdField;
            }
            set {
                this.statusTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public byte PercentComplete {
            get {
                return this.percentCompleteField;
            }
            set {
                this.percentCompleteField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastUpdatedDateTime {
            get {
                return this.lastUpdatedDateTimeField;
            }
            set {
                this.lastUpdatedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] LastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                this.lastUpdatedField = value;
            }
        }
        
        /// <remarks/>
        public int VoteCount {
            get {
                return this.voteCountField;
            }
            set {
                this.voteCountField = value;
            }
        }
        
        /// <remarks/>
        public decimal VoteAverage {
            get {
                return this.voteAverageField;
            }
            set {
                this.voteAverageField = value;
            }
        }
        
        /// <remarks/>
        public int UserVote {
            get {
                return this.userVoteField;
            }
            set {
                this.userVoteField = value;
            }
        }
        
        /// <remarks/>
        public VoteItemType VoteItemType {
            get {
                return this.voteItemTypeField;
            }
            set {
                this.voteItemTypeField = value;
            }
        }
        
        /// <remarks/>
        public int ItemId {
            get {
                return this.itemIdField;
            }
            set {
                this.itemIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public partial class CustomFieldValue {
        
        private CustomField customFieldField;
        
        private object valueField;
        
        /// <remarks/>
        public CustomField CustomField {
            get {
                return this.customFieldField;
            }
            set {
                this.customFieldField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public partial class CustomField {
        
        private int customFieldIdField;
        
        private string tableFieldNameField;
        
        private CustomFieldTypes fieldTypeField;
        
        private CustomRecordTypes recordTypeField;
        
        private string fieldLabelField;
        
        private int pickListIdField;
        
        private int stringSizeField;
        
        private string formatField;
        
        private int displayOrderField;
        
        private bool isMultiSelectField;
        
        private bool isEditableField;
        
        private bool isCustomFieldField;
        
        private bool isGroupableField;
        
        private bool isSearchableField;
        
        private string sortExpressionField;
        
        private string selectExpressionField;
        
        /// <remarks/>
        public int CustomFieldId {
            get {
                return this.customFieldIdField;
            }
            set {
                this.customFieldIdField = value;
            }
        }
        
        /// <remarks/>
        public string TableFieldName {
            get {
                return this.tableFieldNameField;
            }
            set {
                this.tableFieldNameField = value;
            }
        }
        
        /// <remarks/>
        public CustomFieldTypes FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        public CustomRecordTypes RecordType {
            get {
                return this.recordTypeField;
            }
            set {
                this.recordTypeField = value;
            }
        }
        
        /// <remarks/>
        public string FieldLabel {
            get {
                return this.fieldLabelField;
            }
            set {
                this.fieldLabelField = value;
            }
        }
        
        /// <remarks/>
        public int PickListId {
            get {
                return this.pickListIdField;
            }
            set {
                this.pickListIdField = value;
            }
        }
        
        /// <remarks/>
        public int StringSize {
            get {
                return this.stringSizeField;
            }
            set {
                this.stringSizeField = value;
            }
        }
        
        /// <remarks/>
        public string Format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        public int DisplayOrder {
            get {
                return this.displayOrderField;
            }
            set {
                this.displayOrderField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMultiSelect {
            get {
                return this.isMultiSelectField;
            }
            set {
                this.isMultiSelectField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEditable {
            get {
                return this.isEditableField;
            }
            set {
                this.isEditableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCustomField {
            get {
                return this.isCustomFieldField;
            }
            set {
                this.isCustomFieldField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGroupable {
            get {
                return this.isGroupableField;
            }
            set {
                this.isGroupableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSearchable {
            get {
                return this.isSearchableField;
            }
            set {
                this.isSearchableField = value;
            }
        }
        
        /// <remarks/>
        public string SortExpression {
            get {
                return this.sortExpressionField;
            }
            set {
                this.sortExpressionField = value;
            }
        }
        
        /// <remarks/>
        public string SelectExpression {
            get {
                return this.selectExpressionField;
            }
            set {
                this.selectExpressionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public enum CustomFieldTypes {
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        PickList,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Hyperlink,
        
        /// <remarks/>
        Comments,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public enum CustomRecordTypes {
        
        /// <remarks/>
        Defect,
        
        /// <remarks/>
        Feature,
        
        /// <remarks/>
        Task,
        
        /// <remarks/>
        Incident,
        
        /// <remarks/>
        WorkLog,
        
        /// <remarks/>
        Project,
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        CustomerContact,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public enum VoteItemType {
        
        /// <remarks/>
        Defect,
        
        /// <remarks/>
        Feature,
        
        /// <remarks/>
        Task,
        
        /// <remarks/>
        Incident,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public enum UsersTreeFilterFlags {
        
        /// <remarks/>
        CreatedBy = 1,
        
        /// <remarks/>
        ReportedBy = 2,
        
        /// <remarks/>
        AssignedTo = 4,
        
        /// <remarks/>
        LastUpdatedBy = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://axosoft.com/ontime/webservices/")]
    public enum UserType {
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        CustomerContact,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddDefectCompletedEventHandler(object sender, AddDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddDefectWithNotificationCompletedEventHandler(object sender, AddDefectWithNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDefectWithNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDefectWithNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDefectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDefectWithLockCompletedEventHandler(object sender, UpdateDefectWithLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDefectWithLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDefectWithLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteDefectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteDefectWithLockCompletedEventHandler(object sender, DeleteDefectWithLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDefectWithLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDefectWithLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllDefectsCompletedEventHandler(object sender, GetAllDefectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDefectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDefectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllDefectsWithNamesCompletedEventHandler(object sender, GetAllDefectsWithNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDefectsWithNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDefectsWithNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByProjectCompletedEventHandler(object sender, GetDefectsByProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByReleaseCompletedEventHandler(object sender, GetDefectsByReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByReleaseAndProjectCompletedEventHandler(object sender, GetDefectsByReleaseAndProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByReleaseAndProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByReleaseAndProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByCustomerCompletedEventHandler(object sender, GetDefectsByCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByCustomerAndProjectCompletedEventHandler(object sender, GetDefectsByCustomerAndProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByCustomerAndProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByCustomerAndProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByCustomerContactCompletedEventHandler(object sender, GetDefectsByCustomerContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByCustomerContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByCustomerContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByCustomerContactAndProjectCompletedEventHandler(object sender, GetDefectsByCustomerContactAndProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByCustomerContactAndProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByCustomerContactAndProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByUserCompletedEventHandler(object sender, GetDefectsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefectsByUserAndProjectCompletedEventHandler(object sender, GetDefectsByUserAndProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefectsByUserAndProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefectsByUserAndProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetByDefectIdCompletedEventHandler(object sender, GetByDefectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByDefectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetByDefectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Defect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Defect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomFieldValuesListCompletedEventHandler(object sender, GetCustomFieldValuesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomFieldValuesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomFieldValuesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomFieldValue[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomFieldValue[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomFieldsListCompletedEventHandler(object sender, GetCustomFieldsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomFieldsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomFieldsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddChangeNotificationUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddChangeNotificationCustomerContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddChangeNotificationEmailAddressCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CastVoteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591